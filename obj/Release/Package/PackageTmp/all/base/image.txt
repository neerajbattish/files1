search ability during the early stage of evolution, without the premature phenomenon. A hill climbing algorithm was also introduced into the PSO in order to improve the local search ability and to maintain the diversity of the population. The simulation results showed that the GHPSO achieved better performance than standard particle swarm algorithm used in minimizing costs within a given execution time.
Max-Min Particle Swarm Optimization Algorithm with Load Balancing for Distributed Task Scheduling on the Grid Environment [14]
C. Kalpana et. al introduced an algorithm namely Max-Min Particle Swarm Optimization with load balancing techniques and compared with Swarm Intelligence algorithms like Ant Colony Optimization. This algorithm was based on the task scheduling in a grid environment. First of all they calculate the QoS constraints of the PSO and ACO like, makespan, cost and deadline. Finally they balanced the load of the particle swarm optimization, and compared with all other algorithms. Results show that PSO was better than ACO according to makespan, cost and deadline. Load on resources were also balanced for the proposed PSO, Max PSO and Min PSO. A better makespan was achieved, when the load on the resources were balanced. Max-Min PSO gave the best result.  An efficient meta-heuristic algorithm for grid computing [15]
Z. Pooranian et. al introduced a hybrid-scheduling algorithm to solve the independent task scheduling problem in grid computing. They combined PSO with the Gravitational Emulation Local Search (GELS) algorithm to form a new method, PSO–GELS. This method minimizes makespan and the number of tasks that fail to meet their deadlines. Each particle in the PSO algorithm represents a feasible solution. The position vector for PSO was transformed from continuous values to discrete values by rounding the real values. The hybrid PSO algorithm performs better for local searches. Because GELS was used for the local search rather than other local search algorithms such as hill-climbing or SA, the hybrid algorithm finds better solutions than other algorithms. Overall, a comparison of performance of PSO–GELS with existing methods through a simulation experiment showed that PSO–GELS perform better than the other algorithms.
An Upgraded Algorithm of Resource Scheduling using PSO and SA in Cloud Computing [16]
T. Kaur et. al discussed that scheduling was the most prominent issue in cloud computing. Generally the goal of scheduling is to properly dispatch parallel jobs to slave node machines according to different scheduling policies. In this paper previously existing algorithms i.e. Particle Swarm Optimization (PSO), Improved Particle Swarm Optimization (IPSO), Simulated Annealing (SA) Algorithm and Hybrid Particle Swarm Optimization-Simulated Annealing based on utilization time were studied and proposed to handle problems posed by network issues between user and resources. A new algorithm was designed using shortest path theory, Particle Swarm Optimization and Simulated Annealing technique which achieve the target consuming less average execution time to obtain more efficiency in resource utilization and minimize the cost of the processing. In this paper author identified the need of user for management and execution of application on virtual machines in cloud computing in minimum possible time. The experimental evaluation was performed to prove that the proposed algorithm consumes very less time as compared to the existing algorithms.
Multi-Objective Approach for Energy-Aware Workflow Scheduling in Cloud Computing Environments [17]
S. Yassa et. al proposed a new approach for multi-objective workflow scheduling in cloud and presents the hybrid PSO algorithm to optimize the scheduling performance. This method is based on the Dynamic Voltage and Frequency Scaling (DVFS) technique to minimize energy consumption. These techniques allow processors to operate in different voltage supply levels by sacrificing clock frequencies. This multiple voltage involves a compromise between the quality of schedules and energy. The Author proposed a new algorithm called DVFS Multi- Objective Discrete Particle Swarm Optimization (DVFS-MODPSO) for workflow scheduling in distributed environments such as cloud computing infrastructures. DVFS- MODPSO simultaneously optimized several conflicting objectives namely, the makespan, cost and energy in a discrete space.
Tasks Scheduling in Computational Grid using a Hybrid Discrete Particle Swarm Optimization [18]
 M. Karimi1 et. al gave a classification of meta-heuristic scheduling algorithms in distributed computing that were applicable to grid environment and addresses scheduling problem of independent tasks on Computational Grids. Their Proposed work presents a novel task scheduling method based on hybrid DPSO and Min-min (HDPSO) algorithm to solve grid scheduling problem to minimize Completion Time. Each particle represents a feasible solution. The Hybrid DPSO performed better than the DPSO and Min-min algorithm. They used discrete PSO (DPSO) as it has a faster convergence rate than Genetic Algorithm (GA). Also, it has fewer primitive mathematical operators than both GA and Simulated Annealing (SA), making applications less dependent on parameter fine-tuning. It allows them to use the fitness function directly for the optimization problem. In this paper, the proposed hybrid DPSO (HDPSO) decreased the makespan. From the simulated experiment, the result of HDPSO algorithm is better than other algorithms.
Self-Adaptive Learning PSO-Based Deadline Constrained Task Scheduling for Hybrid IaaS Cloud [19] 
X. Zuo et. al proposed a Self-Adaptive Learning PSO (SLPSO) -based scheduling approach which was used to effectively schedule inter-cloud resources. When resources were not sufficient, Iaas provider outsources its workload to the external clouds. This paper compared SLPSO with cloud federation. The results show that this approach finds the optimal and sub-optimal allocation scheme of internal and external resources which improved quality and maximizes the profit of IaaS provider.
Using Swarm Intelligence to Optimize the Energy Consumption for Distributed Systems [20]
N. Bergmann et. al show that Dynamic Voltage Scaling can save significant energy for large, distributed and network-based computing systems, but it faces the challenge of efficient and balanced parallelization of tasks in order to maximize energy savings while maintaining desired performance levels. The author proposed Simplifying Swarm Optimization (SSO) method to reduce the energy consumption for distributed systems with Dynamic Voltage Scaling. The results of SSO were compared to the most popular evolutionary Particle Swarm Optimization (PSO) algorithm and had shown to be more efficient and effective, reducing both the execution time for scheduling and makespan. The experimental results show that the proposed SSO tend to provide an overall better solution than PSO for energy consumption and task scheduling.
Deadline Constrained Task Scheduling Based on Standard-PSO in a Hybrid Cloud [21]
G. Zhang et. al gave an idea for an integer programming model that was established for the problem of resource allocation in a hybrid IaaS cloud environment. The key issue was how to allocate user’s tasks to maximize its profit while guarantee QoS. The problem was formulated as a Deadline for Constrained Task Scheduling (DCTS) problem which was resolved by standard particle swarm optimization (PSO), and compared with an exact approach (CPLEX). In Standard-PSO, each dimension of a particle represents a task and a set of tasks’ priorities was obtained by sorting the dimensions according to their values in a descending order. This approach can make cloud resource allocation more elastic and guarantee user-level QoS. Experimental results show that their approach was able to produce scheduling solutions that were better than those obtained by CPLEX for large size problems.
A Tunable Workflow Scheduling Algorithm Based on Particle Swarm Optimization for Cloud Computing [22]
J. Huang et. al discussed that workflow scheduling is critical for the success of large-scale cloud computing. Particle Swarm Optimization (PSO) has been adopted for workflow scheduling in cloud computing. Most existing work focuses on a single objective. This paper propose a tunable fitness function for the PSO algorithm, based on which a workflow schedule may be selected for minimal cost or minimal makespan (completion time), or any levels in between. A heuristic was further proposed addressing bottleneck problems and attains a smaller makespan. Performance Evaluation and complexity analysis show that the proposed algorithm better than the existing ones in both cost and makespan while maintaining a reasonable load balance and keeping the same time complexity. 
Improving Particle Swarm Optimization Algorithm for Distributed Sensing and Search [23]
Yi Cai et. al proposed a swarm intelligence based algorithm which reduces searching time. Traditional PSO algorithm was modified with random factors to tackle the premature convergence problem. Results show that the proposed method was more feasible, robust and scalable than previous methods. The Proposed method gave better performance when compared with traditional PSO-based algorithm. Total time taken to complete the task was shorter and stable than traditional PSO-based method which results in low power consumption.
Optimized Utilization of Resources Using Improved Particle Swarm Optimization based Task Scheduling Algorithms in Cloud Computing [24]
G. Kaur et. al proposed a new algorithm to get maximum benefit from resources, optimized utilization of resources is also important and for this scheduling plays an important role. Convergence rate of PSO was low while solving large scale optimization problems and PSO easily sink into defects of local optima due to its strong randomicity. PSO algorithm was good during the initial phase but while going through iteration particles lose variety. Then simulated annealing algorithm was mixed with PSO algorithm to solve the problems of PSO which increases the convergence rate and not sink into local optima. Experimental results show that the difference between the average execution time of both the algorithms increases.  The proposed algorithm was 