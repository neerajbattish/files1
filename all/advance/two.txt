An Approach for Secure and Efficient Retrieval of Encrypted Cloud Data 

 
Rajpreet kaur, Research
Scholar, CGC, Landran
Mohali, Punjab
Preet.billing00@gmail.com
Manish Mahajan ,
Head of Department, Computer Science & Engg.
CGC, Landran
Mohali, Punjab
 
	
 
Abstract—In cloud computing, due to large number of data users and documents, it is crucial for the search service to allow multi-keyword query and provide result similarity ranking to meet the effective data retrieval need. First of all, this paper describes in brief about different searching techniques. The searchable symmetric encryption (SSE) focuses on single keyword search or Boolean keyword search, and rarely differentiates the search results. This paper focuses on addressing data privacy issues using SSE. Paper also discusses the privacy issue from the aspect of similarity relevance and scheme robustness. We observe that server-side ranking based on order-preserving encryption (OPE) inevitably leaks data privacy. To eliminate the leakage, a two-round searchable encryption (TRSE) scheme is helpful that supports top-k multikeyword retrieval. In TRSE, a vector space model and homomorphic encryption is used. The vector space model helps to provide sufficient search accuracy, and the homomorphic encryption enables users to involve in the ranking while the majority of computing work is done on the server side by operations only on ciphertext. As a result, information leakage can be eliminated and data security is ensured. The proposed scheme guarantees high security and practical efficiency. In the end,  paper discusses about benefits of TRSE over SSE.
Keywords—Cloud; Data Privacy; similarity relevance; ranking; Homomorphic Encryption; Vector Space Model
	Introduction
Cloud computing is a software through which one can take hardware and software resources on rent. Cloud computing is the delivery of computing services over the Internet. Cloud computing is a model for enabling ubiquitous, convenient on demand network access to a shared pool of configurable computing resources (e.g. networks, servers, storage, applications and services)  that can be rapidly provisioned and released minimal management effort or service provider interaction .
Service model
Cloud software as a service (SaaS): In this software is made available to the user as service. Cloud applications are generally accessible from various devices like mobile, tablet, laptop, PC, workstations, servers etc. The user has no control over the underlying platform and infrastructure. Examples are Dropbox, Google Apps like Gmail, Gtalk etc.
Cloud platform as a service (PaaS): In this software is made available to the user as service. Programming languages and tools are provided by service provider to develop and deployment services. A user has no control over underlying infrastructure but has control over the deployed applications. Examples are Windows Azure, Google App Engine.
Cloud infrastructure as a service (IaaS): In this Software is made available to the user as a service. A user can demand computing infrastructure, storage infrastructure and network infrastructure etc from service provider. User is not the actual owner of the infrastructure but has control over operating systems, storage, deployed applications etc. For example Amazon, Rackspace cloud.
	Searching in cloud data
With the prevalence of cloud services, more and more sensitive information are being centralized into the cloud servers, such as emails, personal health records, private videos and photos, company finance data, government documents, etc. To protect data privacy and combat unsolicited accesses, sensitive data has to be encrypted before outsourcing so as to provide end-to-end data confidentiality assurance in the cloud and beyond. However, data encryption makes effective data utilization a very challenging task given that there could be a large amount of outsourced data files. Besides, in Cloud Computing, data owners may share their outsourced data with a large number of users, who might want to only retrieve certain specific data files they are interested in during a given session. One of the most popular ways to do so is through keyword-based search. Such keyword search technique allows users to selectively retrieve files of interest and has been widely applied in plaintext search scenarios. Unfortunately, data encryption, which restricts user’s ability to perform key-word search and further demands the protection of keyword privacy, makes the traditional plaintext search methods fail for encrypted cloud data. Although traditional encryption scheme allow a user to securely search over encrypted data through keywords without first decrypting it, these techniques support only conventional Boolean keyword search, without capturing any relevance of the files in the search result. When directly applied in large collaborative data outsourcing cloud environment, they may suffer from the following two main drawbacks.

 
Figure 1:  Architecture of keyword search

On the one hand, for each search request, users without pre-knowledge of the encrypted cloud data have to go through every retrieved file in order to find ones most matching their interest, which demands possibly large amount of post processing overhead; On the other hand, invariably sending back all files solely based on presence/absence of the keyword further incurs large unnecessary network traffic, which is absolutely undesirable in today’s pay-as-you-use cloud paradigm. In short, lacking of effective mechanisms to ensure the file retrieval accuracy is a significant drawback of existing searchable encryption schemes in the context of Cloud Computing. Nonetheless, the state-of-the-art in information retrieval (IR) community has already been utilizing various scoring mechanisms to quantify and rank-order the relevance of files in response to any given search query. 
Although the importance of ranked search has received attention for a long history in the context of plaintext searching by IR community, surprisingly, it is still being overlooked and remains to be addressed in the context of encrypted data search. Therefore how to enable a searchable symmetric encryption with support of secure ranked search is the problem tackled in this work.
Issues Related to Privacy
Cloud computing [28], a critical pattern for advanced data service, has became a necessary feasibility for data users to outsource data. Controversies on privacy, however, have been incessantly presented as outsourcing of sensitive information including e-mails, health history and personal photos is explosively expanding. Reports of data loss and privacy breaches in cloud computing systems appear from time to time [29], [30]. The main threat on data privacy roots in the cloud itself [42]. When users outsource their private data onto the cloud, the cloud service providers are able to control and monitor the data and the communication between users and the cloud at will, lawfully or unlawfully.
To ensure privacy, users usually encrypt the data before outsourcing it onto cloud, which brings great challenges to effective data utilization. However, even if the encrypted data utilization is possible, users still need to communicate with the cloud and allow the cloud to operate on the encrypted data, which potentially causes leakage of sensitive information.
Furthermore, in cloud computing, data owners may share their outsourced data with a number of users, who might want to only retrieve the data files of their interest. One of the most popular ways to do so is through keyword-based retrieval. Keyword-based retrieval is a typical data service and widely applied in plaintext scenarios, in which users retrieve relevant files in a file set based on keywords. However, it turns out to be a difficult task in ciphertext scenario due to limited operations on encrypted data. Besides, to improve feasibility and save on the expense in the cloud paradigm, it is preferred to get the retrieval result with the most relevant files that match users’ interest instead of all the files, which indicates that the files should be ranked in the order of relevance by users’ interest and only the files with the highest relevances are sent back to users.
A series of searchable symmetric encryption (SSE) schemes have been proposed to enable search on ciphertext. Traditional SSE schemes [12], [3] enable users to securely retrieve the ciphertext, but these schemes support only Boolean keyword search, i.e., whether a keyword exists in a file or not, without considering the difference of relevance with the queried keyword of these files in the result. To improve security without sacrificing efficiency, schemes presented in [16], [20], [31] show that they support top-k single keyword retrieval under various scenarios. The authors of [5], [32] made attempts to solve the problem of top-k multikeyword over encrypted cloud data. These schemes, however, suffer from two problems—Boolean representation and how to strike a balance between security and efficiency. In the former, files are ranked only by the number of retrieved keywords, which impairs search accuracy. In the latter, security is implicitly compromised to tradeoff for efficiency, which is particularly undesirable in security-oriented applications.
Preventing the cloud from involving in ranking and entrusting all the work to the user is a natural way to avoid information leakage. However, the limited computational power on the user side and the high computational overhead precludes information security. The issue of secure multikeyword top-k retrieval over encrypted cloud data, thus, is: How to make the cloud to do more work during the process of retrieval without information leakage.
In this paper, we introduce the concepts of similarity relevance and scheme robustness to formulate the privacy issue in searchable encryption schemes, and then solve the insecurity problem by proposing a two-round searchable encryption (TRSE) scheme. Novel technologies in the cryptography community and information retrieval (IR) community are employed, including homomorphic encryption and vector space model. In the TRSE scheme, the majority of computing work is done on the cloud while the user takes part in ranking, which guarantees top-k multikeyword retrieval over encrypted cloud data with high security and practical efficiency. This paper covers following things:
	First of all paper gives the brief introduction about cloud computing and then about searching of encrypted cloud data. After that the various issues related to privacy are explained.
	Secondly, various searching techniques are reviewed.
	Then, it discusses the basic searchable encryption scheme and concepts of relevance score, scheme robustness, and statistic leakage of information in SSE technique.
	 Then we explain TRSE scheme, which fulfills the secure multikeyword top-k retrieval over encrypted cloud data. As SSE violates data privacy, TRSE guarantees more efficient and secure search method for encrypted cloud data.
	 After it paper focuses on basics of TRSE design and then compares both SSE and TRSE.
	existing Techniques
Next, we introduce the methodology and briefly describe the main building blocks toward designing usable and efficient privacy-assured search schemes.
Methodology- A top-down approach is described in figure 2. Given a search functionality in the plaintext domain, one can decompose it into a certain data index structure and primitive data operations using relevant information retrieval (IR) principles. 

 

Figure2. Top-down methodology for designing privacy assured schemes[27]
Then a proper encryption scheme is found to encrypt the data while simultaneously allowing data operations.
	Although efficiency could be improved due to the adopted index structure, care needs to be taken to prevent leakage of private information to the cloud server, especially when the server possesses background information on the query statistics. As a result, sometimes the encryption primitive itself may need to be adapted to meet privacy requirements. Further some techniques for searching are discussed based on different factors:
Symmetric Searchable Encryption —Curtmola et al. proposed SSE, which is a deterministic symmetric key encryption scheme with security guarantees under rigorous definitions [8]. The SSE scheme is based on the inverted index and uses pseudorandom functions/permutations, which makes the search quite efficient. Roughly speaking, the index consists of blinded keywords f_k (w_i) and lists of FIDs containing? w?_i, where f () is a pseudorandom function and k is the secret key. The search trapdoor is also in the same form so that the server can perform matching. However, it only supports single-keyword exact query.
Scalar-Product-Preserving Encryption —An SPE scheme [19] preserves the dot product between two d-dimensional vectors (e.g., a query vector q ? and a database record (pi) ?). Roughly speaking, the secret key is composed of one (d + 1) -bit vector s ? and two (d + 1)×(d + 1) invertible matrices{M_1,M_2 }. Every data vector (pi) ? and query vector q ? are extended, (pi) ? is randomly scaled, and both of them are split into two random vectors {(p_i  ) ?^',(p_i ) ?''}  and {q ?^',q ?''}  respectively. They are encrypted as {M_1^T (p_i  ) ?^',M_2^T (p_i  ) ?^''} and {M_(-1)^1 q ?^',M_(-1)^2 q ?^''} respectively. The server can then recover rq ?·(pi) ? from ciphertexts, without knowing the original vectors. For each dimension, the method of splitting is controlled by the corresponding bit in key vectorS ?, which is proven to provide sufficient security against known ciphertext attacks [19].
Order-Preserving Symmetric Encryption — In OPSE [2], the numerical ordering of plaintext is preserved after encryption. Boldyreva et al. [2] provide the first cryptographic construction of OPSE that is provably secure under the security framework of pseudorandom function or pseudorandom permutation. It can be regarded as a function   g (.)  from a domain D = {1, …, M} to a range R={1,…,N}.
Achieving Secure Ranked Search over Encrypted Data
An especially important functionality in plaintext IR is to support ranking mechanisms over search results according to user-specified relevance criteria. Usually, this is achieved by building an inverted index (index structure) and adopting a ranking function to compute the rank of each file relevant to a given search request (primitive data operations are keyword matching and sorting). For example, the following function can be used:
Score(t,F_d )=1/|F_d | ·(1+ln??f_(d,t) ? )                      (1)                     
Where t is the search keyword (term),? f?_(d,t)  denotes the term frequency (TF) of keyword t in file  F_d, and |F_d |  is the number of indexed keywords in F_d. Toward achieving secure ranked search in the encrypted domain, Zerr et al. [20] observed that although the posting list elements (document IDs that contain each keyword in an inverted index) are encrypted, the term frequency distribution for each posting list can still help adversaries re-identify the keyword. Thus, they proposed to transform the relevance scores such that their distribution is uniform for each keyword. They show that this scheme satisfies a definition called r-confidentiality in a statistical sense. However, it requires much preprocessing and does not easily handle score dynamics, while the security level is weak. To improve both the efficiency and privacy, Wang et al. proposed a ranked symmetric searchable encryption (RSSE) scheme [23] that enables result ranking for single keyword query. To ensure privacy, a straightforward yet ideally secure RSSE scheme can be derived based on the existing SSE solution in [8], but requires two rounds of interactions between the user and the cloud server, which incurs high communication overhead. Thus, they adopt OPSE [2] to obtain practical performance, where the numerical ordering of the plaintexts is preserved after encryption. Specifically, during the search operation the relevance order (OPSE encrypted relevance scores) of each document is revealed to the server. In this way, efficient relevance score ranking can be done as in the plaintext domain. However, because the original OPSE is a deterministic encryption scheme, this still leaks much information. If the server has some background information on the dataset, such as the distribution of relevance scores for each plaintext keyword, it could reverse-engineer the keyword. To break this determinacy, the authors propose one-to many order-preserving mapping (OPM), which maps the same relevance score to different encrypted values. They incorporate the unique file IDs together with the plaintext as the random seed in the final ciphertext chosen process in OPSE. Thus, the same plaintext will no longer be deterministically assigned to the same ciphertext, but instead to a random value within the randomly assigned bucket in a range R. Furthermore, they use different keys to encrypt the relevance score for different posting lists (documents containing each keyword) to make the OPM more indistinguishable. The RSSE scheme achieves data and index privacy, because the relevance scores in the searchable index are encrypted using OPSE with OPM. The highly flattened one-to-many mapping and the fully randomized score-to-bucket assignment in OPSE makes it difficult for an adversary to predict the original plaintext score distribution by observing the ciphertext. In addition, this scheme hides the search keyword from the adversary. But since the trapdoor is deterministic, it does not provide query unlinkability. For efficiency, the encrypted index generation and search operations can both be finished within seconds for 1000 documents.
The above method cannot directly handle multiple-keyword ranked search, because the order of OPSE’s ciphertext will not be preserved for the sum of multiple relevance scores. To support secure multi-keyword ranked search over encrypted data (MRSE), Cao et al. [21] proposed to adopt another similarity measure from the IR community, coordinate matching, which captures the relevance of documents to a query through the number of query keywords appearing in a document. Each document index and the query are described as a binary vector (index structure), respectively, such that the similarity is measured by the dot product of the two vectors (primitive data operation). In order to protect the index privacy and search privacy, one shall encrypt the index and query vectors, and compute the similarity score over cipher texts. To this end, they propose a secure inner-product computation mechanism that adapts the SPE scheme originally used for secure k-nearest neighbor (kNN) query in [24]. Basically, the search operation should compute the dot product between a query vector ?(q ? ) and each data (index) vector(? p?_i ) ?. However, a straightforward application of SPE is not secure as it linearly preserves the dot product, by which the server can statistically analyze similarity scores for two queries differing in one keyword to learn that keyword (called scale analysis attack), especially in the KB model. Therefore, to build a secure MRSE that preserves search privacy, they obfuscate the document frequency to diminish the chances for re-identification of keywords. In particular, they propose to add randomness to both the data vector and query vector in order to blind the exact similarity score from the server. The randomness is added on the fly, by extending both vectors with dummy random keywords. In the MRSE scheme, the data and index privacy are achieved since the encryption algorithm is secure in the KC model. In addition, under the KB model query confidentiality is achieved as well as trapdoor unlinkability. It introduces nearly constant search overhead with the increase of keywords; in contrast, in other multiple-keyword search schemes this is linear.
Dealing with Fuzziness and Similarity
In the IR community, similarity can be defined using the edit distance, which represents the least number of modification operations (including deletion, insertion, and substitution) needed to change one word into another. For example, the edit distance between “Britney” and “briny” is 2. When the edit distance equals 1, it is usually called fuzzy search. Thus, in a similarity search problem, given a keyword w and an edit distance d, a search execution should return a set of files {?FID?_(w_i ) }, where ed(w,w_i )=d .
  A straightforward method is to build a similarity keyword set that incorporates not only the exact keywords but also those that differ by up to edit distance d. Also, the search would require a trapdoor for each similar word to the query keyword. However, this incurs high storage and computation overhead at the server side due to the large number of possible similar keywords. Thus, in [25], Li et al. proposed using two data representation techniques to enhance the efficiency for fuzzy search. One is to compress the fuzzy keyword set S_(w_i ) of each keyword w_i using wildcard letter ? ; the other is to use Bloom Filters to represent the index corresponding to a fuzzy keyword set. The first technique reduces the server storage and search cost linear to the product of keyword length with the number of keywords O(l|W| ). Whereas the second-one further reduces it to O(|W| ). In [26], Wang et al. extended the above scheme to handle the general case when d > 1. The wildcard suppression technique brings more storage savings when d is larger. However, since the search complexity is still linear to the total number of keywords, they propose to index and encode the keywords using a trie data structure so that the search cost is reduced to O(1). To protect privacy, the above two schemes both utilize SSE as the basic encryption primitive. Their schemes are proven secure following the rigorous security definitions of SSE. Both of them achieve data and index privacy and query confidentiality, while being very efficient. The security intuition is that each keyword in the similarity set and the query input is encrypted using a pseudorandom function into a random bit string such that the server cannot distinguish keywords from each other. However, query unlinkability is not achieved because of the deterministic nature of SSE. 
	 SEARCHABLE SYMMETRIC ENCRYPTION
System Model- We consider a cloud computing system hosting data service, as illustrated in Figure 3. , in which three different entities are involved: cloud server, data owner, and data user. The cloud server hosts third- Party data storage and retrieve services. Since data may contain sensitive information, the cloud servers cannot be fully entrusted in protecting data. For this reason, outsourced files must be encrypted. Any kind of information leakage that would affect data privacy is regarded as unacceptable. 

 
Figure 3. Framework of the semantic expansion based similar search over encrypted data [43]
The data owner has a collection of n files C={f_1,f_2,…,f_n }  outsource onto the cloud server in encrypted form and expects the cloud server to provide keyword retrieval service to data owner himself or other authorized users. To achieve this, the data owner needs to build a searchable index I from a collection of l keywords W={w_1,w_(2,)...,w_n} extracted out of C, and then outsources both the encrypted index I^' and encrypted files onto the cloud server.
The data user is authorized to process multikeyword retrieval over the outsourced data. The computing power on the user side is limited, which means that operations on the user side should be simplified. The authorized data user at first generates a query REQ={(w_1^',w_2^',…,w_s^' ) ?/w?_i^'?W,1=i=s=l }. For privacy consideration, which keywords the data user has searched must be concealed. Thus, the data user encrypts the query and sends it to the cloud server that returns the relevant files to the data user. Afterward, the data user can decrypt and make use of the files.
Relevance Scoring- Some of the multikeyword SSE schemes support only Boolean queries, i.e., a file either matches or does not match a query. Considering the large number of data users and documents in the cloud, it is necessary to allow multikeyword in the search query and return documents in the order of their relevancy with the queried keywords. Scoring is a natural way to weight the relevance. Based on the relevance score, files can then be ranked in either ascendingly or descendingly. Several models have been proposed to score and rank files in IR community. Among these schemes, we adopt the most widely used one tf-idf weighting, which involves two attributes-term frequency and inverse document frequency. The tf-idf weighting involves two attributes: Term frequency and inverse document frequency. Term frequency (tf_t,f)  denotes the number of occurrences of term t in filef. Document frequency (df_t )  refers to the number of files that contains term t, and the inverse document frequency (idf_t )  is defined as: idf_t=log??N/(df_t )?  , where N denotes the total number of files. Then, the tf-idf weighting scheme assigns to term t a weight in file f given by tf-idf_(t,f)=tf_(t,f)×idf_t. By introducing the IDF factor, the weights of terms that occur very frequently in the collection are diminished and the weights of terms that occur rarely are increased.
Problems of SSE
Statistic Leakage- The cloud server in our work is considered as “honest-but-curious” [16], a model extensively used in SSE and characterized by that the cloud server will honestly follow
the designed protocol but is curious to analyze the hosted data and the received queries to learn extra information. 
Although all data files, indices, and requests are in encrypted form before being outsourced onto cloud, the cloud server can still obtain additional information through statistical analysis. We denote the possible information leakage with statistic leakage. There are two possible statistic leakages, including term distribution and interdistribution. The term distribution of term t is t^' s frequency distribution of scores on each file i(i?C). The interdistribution of file f is file f's frequency distribution of scores of each term j(j?f). Term distribution and interdistribution are specific [20]. They can be deduced either directly from ciphertext or indirectly via statistical analysis over access and search pattern [8]. Here, access pattern refers to which keywords and the corresponding files have been retrieved during each search request, and search pattern refers to whether the keywords retrieved between two requests are the same. Based on our observation, distribution information implies a similarity relationship among terms or files. On the one hand, terms with similar term distribution always have simultaneous occurrence. For instance, obviously, the term “states” are very likely to co-occur with “united” in an official paperwork from the White House, and their term distribution, not surprisingly, are very same in a series of such a kind of paperwork. Given that this paperwork is encrypted but term distribution is not concealed, once an adversary somehow cracks out the plaintext of “united,” he can reasonably guess the term that shares a similar term distribution with “united” may be “states.” On the other hand, files with similar interdistribution are always the same category, e.g., two medical records from a dental office surely are the same category, and they are very likely to share a similar interdistribution (such as the titles of each entries are the same). Therefore, this specificity should be hidden from an untrusted cloud server.
Scheme Robustness- Given the similarity relevance, which implies terms’ co-occurrence, data privacy may be potentially threatened. According to [33], co-occurrence of words, which means how often a word co-occur with another word in a text, is one of the most basic corpus linguistics statistics, and it is measurable through various means including but not limited to point wise mutual information and the t-score.
	TRSE Design
Existing SSE schemes employ server-side ranking based on OPE to improve the efficiency of retrieval over encrypted cloud data. However, server-side ranking based on OPE violates the privacy of sensitive information, which is considered uncompromisable in the security-oriented third party cloud computing scenario, i.e., security cannot be tradeoff for efficiency. To achieve data privacy, ranking has to be left to the user side. Traditional user-side schemes, however, load heavy computational burden and high communication overhead on the user side, due to the interaction between the server and the user including searchable index return and ranking score calculation.
Thus, the user-side ranking schemes are challenged by practical use. A more server-siding scheme might be a better solution to privacy issues. We study a new searchable encryption scheme, in which novel technologies in cryptography community and IR community are employed, including homomorphic encryption and the vector space model. In the proposed scheme, the data owner encrypts the searchable index with homomorphic encryption. When the cloud server receives a query consisting of multikeywords, it computes the scores from the encrypted index stored on cloud and then returns the encrypted scores of files to the data user. Next, the data user decrypts the scores and picks out the top-k highest scoring files’ identifiers to request to the cloud server. The retrieval takes a two-round communication between the cloud server and the data user. We, thus, name the scheme the TRSE scheme, in which ranking is done at the user side while scoring calculation is done at the server side.
Vector Space Model- While tf-idf depicts the weight of a single keyword on a file, we employ the vector space model to score a file on multikeyword. The vector space model [35] is an algebraic model for representing a file as a vector. Each dimension of the vector corresponds to a separate term, i.e., if a term occurs in the file, its value in the vector is nonzero, otherwise is zero. The vector space model supports multiterm and non-binary presentation. Moreover, it allows computing a continuous degree of similarity between queries and files, and then ranking files according to their relevance. It meets our needs of top-k retrieval. A query is also represented as a vector( q) ?, while each dimension of the vector is assigned with 0 or 1 according to whether this term is queried. The score of file f on query q(?Score?_(f,q) )  is deduced by the inner product of the two vectors: ?Score?_(f,q)=(v_f ) ?·q ?. Given the scores, files can be ranked in order and, therefore, the most relevant files can be found.
Practical Homomorphic Encryption Scheme- To alleviate the computational burden on the user side, computing work should be at the server side, so we need an encryption scheme to guarantee the operability and security at the same time on server side. Homomorphic encryption allows specific types of computations to be carried out on the corresponding ciphertext. The result is the ciphertext of the result of the same operations performed on the plaintext. That is, homomorphic encryption allows computation of ciphertext without knowing
anything about the plaintext to get the correct encrypted result. Although it has such a fine property, the original fully homomorphic encryption scheme, which employs ideal lattices over a polynomial ring [34], is too complicated and inefficient for practical utilization. Fortunately, as a result of employing the vector space model to top-k retrieval, only addition and multiplication operations over integers are needed to compute the relevance scores from the encrypted searchable index. Therefore, we can reduce the original homomorphism in a full form to a simplified form that only supports integer operations, which allows more efficiency than the full form does. In the fully homomorphic encryption over the integers (FHEI) scheme [37], the approximate integer greatest common divisor (GCD) is used to provide sufficient security, i.e., given a list of integers l={i_1,i_2,…,i_n }  that are approximate multiples of a hidden integer j, to find the hidden integer j. The approximate GCD problem has been proven hard by Howgrave-Graham [36]. Let m and c denote the plaintext and ciphertext of the integer, respectively. Our encryption scheme can be expressed as the following formulation:  c=pq+2r+m, where p denotes the secret key, q denotes the multiple parameters, and r denotes the noise to achieve proximity against brute-force attacks. The public key is pq+r. 
However, as the scores of items in file vector of searchable index I_p  is multibit, the total size of I_c and the computed results will be very large due to the FHEI scheme encrypts 1 bit to ?p?+?q?  bit (here ?p?  refers to bit length of  p, i.e., ?p?=?log?p ?). To downsize the ciphertext and, thus, mitigate the communication overhead, we modify the original FHEI scheme more flexible to meet our needs: c=pq+xr+m, where x=2^2?m? ,p»r , and r»x to ensure the correctness of the decryption. Since the size of the result will be doubled after multiplication, the noise parameter x is, thus, required to be at least 2^2?m? . Therefore, multibit is considered as a unit for encryption, and the size of ciphertext is significantly reduced, i.e., the size of ciphertext can be reduced down to 1/?m?  of that in original FHEI scheme. For example, assume the value of scores is up to 2^10, then the size of ciphertext will be 10(?p?+?q? ) for encryption of each bit of m if applying the original FHEI scheme, while only  (?p?+?q? )   in the modified FHEI scheme.
Framework of TRSE- The framework of TRSE includes four algorithms: Setup, IndexBuild, TrapdoorGen, ScoreCalculate, and Rank.
	Setup (?) - The data owner generates the secret key and public keys for the homomorphic encryption scheme. The security parameter ?  is taken as the input, the output is a secret key SK, and a public key set PK.
	IndexBuild (C,PK) - The data owner builds the secure searchable index from the file collection C. Technologies from IR community like stemming are employed to build searchable index I from C, and then I is encrypted into I^' with PK, output the secure searchable index? I?^'.
	TrapdoorGen (REQ,PK) - The data user generates secure trapdoor from his request REQ. Vector T_?  is built from user’s multikeyword request REQ and then encrypted into secure trapdoor T_?  with public key from PK, output the secure trapdoor T_?  .
	ScoreCalculate (T_?,? I?^') - When receives secure trapdoor T_?  , the cloud server computes the scores of each files in ? I?^'  with T_?   and returns the encrypted result vector ? back to the data user.
	Rank (?,SK,k) - The data user decrypts the vector ? with secret key SK and then requests and gets the files with top-k scores.
Note that ? is only involved in the Setup algorithm, and the Setup algorithm needs to be processed only once by the data owner,? thus, is a constant integer for one individual application instance. The whole framework can be divided into two phases: Initialization and Retrieval. The Initialization
phase includes Setup and IndexBuild. The Setup stage involves the secure initialization, while the IndexBuild stage involves operations on plaintext. For security concerns, the vast majority of work should only be done by the data owner. Moreover, for convenience of retrieve, we modify the original vector space model by adding each vector v_i a head node id_iat the first dimension of v_i to store the identifier of? f?_i. In this way, the correspondence between scores and files is established.
	Evaluating benefits of trse over sse and other schemes
Efficiency Improvement
The main appeal of the modified FHEI that we employ in the TRSE scheme is its conceptual simplicity compared to Gentry’s [34]. This simplicity is achieved at the cost of a large key size. Although optimizations like modular reduction and compression can be employed to reduce the size of ciphertext, the key size is still too large for the practical system. As discussed earlier, the user encrypts his trapdoor and sends the ciphertext to the cloud server. Therefore, the communication overhead will be very high if the encrypted trapdoor size is too large. To solve this problem and, thus, improve efficiency, a tradeoff of the security of search pattern may be needed unless a new encryption scheme that provides more reasonable ciphertext size becomes available. Researchers from cryptography community [38], [39] have made several attempts to move toward practical fully homomorphic encryption over integers. These progresses indicate that the efficiency of the TRSE scheme can be further improved.
Enable Update
In a practical cloud computing system, data updates like adding or deleting files lead to a new challenge to the searchable encryption scheme. Since data updates may be frequent, e.g., doctors update patients’ medical records every day in a medical system and users update their photo albums weekly or even daily, it is necessary to consider the efficiency of update in searchable encryption design. In the presence of an update, both the file itself and the searchable index require update operation. The vector space model employed in the TRSE scheme relies on the tf-idf weight, in which the inverse document frequency (idf) factor depends on the number of files that contain a keyword. When a file is added or deleted, the idf factor may change for a keyword. To avoid updating all the searchable index when updates occur, the file vectors should be independent to each other. Since the searchable index is built for each file, a possible solution is to only store tf values in file vectors and add another auxiliary vector to store idf values for each keyword. In this way, update is limited to the auxiliary vector, rather than all searchable indexes. The expense is that the tf-idf weights need to be calculated to get the relevance scores during each search request. Since the calculation is on the server side and the computing power on the server side is high, the overall efficiency is almost immune to the update. 
Security Analysis
As discussed in [43] the security of the TRSE fulfills of the security guarantees of traditional SSE and the privacy requirements discussed earlier. First, the cloud server should not learn either the plaintext of the data files, index, and the searched keywords or their statistic information including access pattern, search pattern, and distribution. Second, the cloud server should not learn the similarity relevance of terms or files so that the scheme has high robustness.
VII.CONCLUSION
In this paper, we motivate and solve the problem of secure multikeyword top-k retrieval over encrypted cloud data. We define similarity relevance and scheme robustness. Based on OPE invisibly leaking sensitive information, we devise a server-side ranking SSE scheme. We then propose a TRSE scheme employing the fully homomorphic encryption, which fulfills the security requirements of multikeyword top-k retrieval over the encrypted cloud data. By security analysis, we show that the proposed scheme guarantees data privacy. According to the efficiency evaluation of the proposed scheme over a real data set, extensive experimental results in [43] demonstrate that our scheme ensures practical efficiency.
VIII. FUTURE SCOPE
This paper discusses various approaches for secure and efficient retrieval of encrypted cloud data. TRSE ensures more secure and efficient search methodology than other approaches. In future one can work on efficient and fast retrieval approaches which provide relevant results with less computation overheads. Extensive knowledge in the fields of cryptography, information retrieval and database can bring new areas of performance enhancement in this field. Work can be done on performance enhancement by focusing on computational load and also including more and more security factors.

